# The lane line and the driving area segment branches without share information with each other and without link
YOLOP:
  [[45, 54, 63],   #Det_out_idx, Da_Segout_idx, LL_Segout_idx
      # [from, module, args]
      # from：输入来自那一层，-1代表上一次，1代表第1层，3代表第3层
      # module：子模块
      # args：模块参数，channel_in，channel_out，kernel_size，stride，padding，bias等]
   [-1, Conv, [3, 32, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 0-P1/2       320
  
   [-1, Conv, [32, 64, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 1-P2/4      160
   
   # E-ELAN
   [-1, Conv, [64, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-2, Conv, [64, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [[-1, -2, -3, -4], Concat, [1]],                                     # 160
   # E-ELAN
   [-1, Conv, [128, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 7        # 160
   
     # MPConv
   [-1, MP, []],  # 8-P3/8                                              # 80
   [-1, Conv, [64, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-2, Conv, [64, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [[-1, -2, -3, -4], Concat, [1]],                                     # 80
     # MPConv
   [-1, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 14      # 80

     # MPConv
   [-1, MP, []],  # 15-P4/16                                            # 40
   [-1, Conv, [128, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-2, Conv, [128, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [[-1, -2, -3, -4], Concat, [1]],                                     # 40
     # MPConv
   [-1, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 21      # 40
   
      # MPConv
   [-1, MP, []],  # 22-P5/32                                            # 20
   [-1, Conv, [256, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-2, Conv, [256, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, Conv, [256, 256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, Conv, [256, 256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [[-1, -2, -3, -4], Concat, [1]],                                     # 20
    # MPConv
   [-1, Conv, [1024, 512, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 28     # 20
    
    #backbone


    [ -1, SPP, [512, 512, [5, 9, 13]]],     #29                            # 20

    [ -1, BottleneckCSP, [512, 512, 1, False]], #30                        # 20
    [ -1, Conv,[512, 256, 1, 1]],   #31                                    # 20
    [ -1, Upsample, [None, 2, 'nearest']],  #32                            # 40

    [ [-1, 21], Concat, [1]],    #33                                       # 40
    [ -1, BottleneckCSP, [512, 256, 1, False]], #34                        # 40
    [ -1, Conv, [256, 128, 1, 1]],  #35                                    # 40
    [ -1, Upsample, [None, 2, 'nearest']],  #36                            # 80

    [ [-1,14], Concat, [1]],     #37                                       # 80
    [ -1, BottleneckCSP, [256, 128, 1, False]], #38                        # 80
    [ -1, Conv, [128, 128, 3, 2]],      #39                                # 40
    #Neek



    [ [-1, 35], Concat, [1]],       #40                                    # 40
    [ -1, BottleneckCSP, [256, 256, 1, False]],     #41                    # 40
    [ -1, Conv, [256, 256, 3, 2]],      #42                                # 20

    [ [-1, 31], Concat, [1]],   #43                                        # 20
    [ -1, BottleneckCSP, [512, 512, 1, False]],     #44                    # 20

    [ [38, 41, 44], Detect,  [1, [[3,9,5,11,4,20], [7,18,6,39,12,31], 
                        [19,50,38,81,68,157]], [128, 256, 512]]], #Detection head 45


    [ 37, Conv, [256, 128, 3, 1]],   #46                                   # 80
    [ -1, Upsample, [None, 2, 'nearest']],  #47                            # 160
    [ -1, BottleneckCSP, [128, 64, 1, False]],  #48                        # 160
    [ -1, Conv, [64, 32, 3, 1]],    #49                                    # 160
    [ -1, Upsample, [None, 2, 'nearest']],  #59                            # 320
    [ -1, Conv, [32, 16, 3, 1]],    #51                                    # 320
    [ -1, BottleneckCSP, [16, 8, 1, False]],    #52                        # 320
    [ -1, Upsample, [None, 2, 'nearest']],  #53                            # 640
    [ -1, Conv, [8, 2, 3, 1]], #54                                         # 640
    # Driving area segmentation head


    [ 37, Conv, [256, 128, 3, 1]],   #55                                   # 80
    [ -1, Upsample, [None, 2, 'nearest']],  #56                            # 160
    [ -1, BottleneckCSP, [128, 64, 1, False]],  #57                        # 160
    [ -1, Conv, [64, 32, 3, 1]],    #58                                    # 160
    [ -1, Upsample, [None, 2, 'nearest']],  #59                            # 320
    [ -1, Conv, [32, 16, 3, 1]],    #60                                    # 320
    [ -1, BottleneckCSP, [16, 8, 1, False]],    #61                        # 320
    [ -1, Upsample, [None, 2, 'nearest']],  #62                            # 640
    [ -1, Conv, [8, 2, 3, 1]], #63                                         # 640
    # Lane line segmentation head
  ]