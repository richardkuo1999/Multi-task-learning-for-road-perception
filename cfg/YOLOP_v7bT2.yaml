# The lane line and the driving area segment branches without share information with each other and without link
YOLOP:
  [[77, 94, 110],   #Det_out_idx, Da_Segout_idx, LL_Segout_idx
      # [from, module, args]
      # from：输入来自那一层，-1代表上一次，1代表第1层，3代表第3层
      # module：子模块
      # args：模块参数，channel_in，channel_out，kernel_size，stride，padding，bias等]
   [-1, Conv, [3, 32, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 0-P1/2       320
  
   [-1, Conv, [32, 64, 3, 2, None, 1, nn.LeakyReLU(0.1)]],  # 1-P2/4      160
   
   # E-ELAN
   [-1, Conv, [64, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-2, Conv, [64, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],              # 160
   [[-1, -2, -3, -4], Concat, [1]],                                     # 160
   # E-ELAN
   [-1, Conv, [128, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 7        # 160
   
     # MPConv
   [-1, MP, []],  # 8-P3/8                                              # 80
   [-1, Conv, [64, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-2, Conv, [64, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                  # 80
   [[-1, -2, -3, -4], Concat, [1]],                                     # 80
     # MPConv
   [-1, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 14      # 80

     # MPConv
   [-1, MP, []],  # 15-P4/16                                            # 40
   [-1, Conv, [128, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-2, Conv, [128, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 40
   [[-1, -2, -3, -4], Concat, [1]],                                     # 40
     # MPConv
   [-1, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 21      # 40
   
      # MPConv
   [-1, MP, []],  # 22-P5/32                                            # 20
   [-1, Conv, [256, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-2, Conv, [256, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, Conv, [256, 256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [-1, Conv, [256, 256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],                 # 20
   [[-1, -2, -3, -4], Concat, [1]],                                     # 20
    # MPConv
   [-1, Conv, [1024, 512, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 28     # 20
    
    #backbone



   [-1, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, SP, [5]],
   [-2, SP, [9]],
   [-3, SP, [13]],
   [[-1, -2, -3, -4], Concat, [1]],

   [-1, Conv, [1024, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -7], Concat, [1]],
   [-1, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 37
  
   [-1, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, nn.Upsample, [None, 2, 'nearest']],
   [21, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P4
   [[-1, -2], Concat, [1]],
 # E-ELAN
   [-1, Conv, [256, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, Conv, [256, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -2, -3, -4], Concat, [1]],
 # E-ELAN
   [-1, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 47
  
   [-1, Conv, [128, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, nn.Upsample, [None, 2, 'nearest']],
   [14, Conv, [128, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]], # route backbone P3
   [[-1, -2], Concat, [1]], # 51
   
  #Neck


 # E-ELAN
   [-1, Conv, [128, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, Conv, [128, 32, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [32, 32, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -2, -3, -4], Concat, [1]],
 # E-ELAN
   [-1, Conv, [128, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 57
   
   [-1, Conv, [64, 128, 3, 2, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, 47], Concat, [1]],
   
# E-ELAN
   [-1, Conv, [256, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, Conv, [256, 64, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [64, 64, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -2, -3, -4], Concat, [1]],
# E-ELAN
   [-1, Conv, [256, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 65
   
   [-1, Conv, [128, 256, 3, 2, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, 37], Concat, [1]],
   
# E-ELAN
   [-1, Conv, [512, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-2, Conv, [512, 128, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [-1, Conv, [128, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [[-1, -2, -3, -4], Concat, [1]],
# E-ELAN
   [-1, Conv, [512, 256, 1, 1, None, 1, nn.LeakyReLU(0.1)]],  # 73
      
  #  [57, Conv, [64, 128, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
  #  [65, Conv, [128, 256, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
  #  [73, Conv, [256, 512, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
   [57, RepConv, [64, 128, 3, 1]],
   [65, RepConv, [128, 256, 3, 1]],
   [73, RepConv, [256, 512, 3, 1]],

   [[74,75,76], IDetect, [1, [[3,9,5,11,4,20], [7,18,6,39,12,31], 
                        [19,50,38,81,68,157]], [128, 256, 512]]],   # Detect(P3, P4, P5)

   #Detection head


    [ 51, Conv, [128, 128, 1, 1]],   #78       
    

    [78, Upsample, [None, 2, 'nearest']],  #79                          # 160
# E-ELAN 
    [-1, Conv, [128, 16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, Conv, [128, 16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [16, 16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [16, 16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], Concat, [1]],                                    # 160                              
# E-ELAN                               
    [ -1, Conv, [64, 32, 3, 1]],    #85                                 # 160
    [ -1, Upsample, [None, 2, 'nearest']],  #86                         # 320
    [ -1, Conv, [32, 16, 3, 1]],    #87                                 # 320
# E-ELAN
    [-1, Conv, [16, 2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, Conv, [16, 2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [2, 2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [2, 2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], Concat, [1]],                                    # 320                              
# E-ELAN                               
    [ -1, Upsample, [None, 2, 'nearest']],  #93                         # 640
    [ -1, Conv, [8, 2, 3, 1]], #94                                      # 640
   # Driving area segmentation head




    [ 78, Upsample, [None, 2, 'nearest']],  #95                         # 160
# E-ELAN
    [-1, Conv, [128, 16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, Conv, [128, 16, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [16, 16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [16, 16, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], Concat, [1]],                                    # 160                              
# E-ELAN                               
    [ -1, Conv, [64, 32, 3, 1]],    #101                                # 160
    [ -1, Upsample, [None, 2, 'nearest']],  #102                        # 320
    [ -1, Conv, [32, 16, 3, 1]],    #103                                # 320
# E-ELAN
    [-1, Conv, [16, 2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-2, Conv, [16, 2, 1, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [2, 2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [-1, Conv, [2, 2, 3, 1, None, 1, nn.LeakyReLU(0.1)]],
    [[-1, -2, -3, -4], Concat, [1]],                                    # 320                              
# E-ELAN                               
    [ -1, Upsample, [None, 2, 'nearest']],  #109                        # 640
    [ -1, Conv, [8, 2, 3, 1]], #110                                     # 640

   # Lane line segmentation head
  ]
